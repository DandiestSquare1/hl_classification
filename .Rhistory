library(data.table)
dir()
DT <- fread('SwingHiLoData.csv')
head(DT,2)
target = DT$recordType
DT[, recordType:=NULL]
str(DT)
library(caret)
library(glmnet)
library(xgboost)
DT
head(names(DT))
X_train = data.matrix(DT)
warnings()
sum(is.na(X_train))
names(DT)
setnames(DT, names(DT), gsub(' ', '', names(DT)))
names(DT)
?regex
setnames(DT, names(DT), gsub('[[:space:]]', '', names(DT)))
head(names(DT))
data.matrix(DT[1:100])
warnigns()
warnings()
sum(is.na(DT))
str(DT)
for(j in names(DT))
set(DT, j=j, value=ifelse(DT[[j]] == 'TRUE', 1, 0))
str(DT)
for(j in names(DT))
set(DT, j=j, value=ifelse(grepl('TRUE', DT[[j]]), 1, 0))
str(DT)
X_train = data.matrix(DT)
sum(is.na(X_train))
class_tbl = table(target)
class_tbl
scale_pos_weight = class_tbl[[1]] / class_tbl[[2]]
scale_pos_weight
dtrain <- xgb.DMatrix(X_train, label=log_cost, missing = NA)
dtest <- xgb.DMatrix(X_test, missing = NA)
target
tail(target)
shuffle = sample(1:nrow(DT), nrow(DT))
shuffle
DT = DT[shuffle]
X_train = data.matrix(DT)
class_tbl = table(target)
scale_pos_weight = class_tbl[[1]] / class_tbl[[2]]
set.seed(123)
shuffle = sample(1:nrow(DT), nrow(DT))
DT = DT[shuffle]
library(data.table)
library(caret)
library(glmnet)
library(xgboost)
DT <- fread('SwingHiLoData.csv')
head(DT,2)
target = DT$recordType
DT[, recordType:=NULL]
setnames(DT, names(DT), gsub('[[:space:]]', '', names(DT)))
for(j in names(DT))
set(DT, j=j, value=ifelse(grepl('TRUE', DT[[j]]), 1, 0))
set.seed(123)
shuffle = sample(1:nrow(DT), nrow(DT))
DT = DT[shuffle]
target = target[shuffle]
X_train = data.matrix(DT)
class_tbl = table(target)
scale_pos_weight = class_tbl[[1]] / class_tbl[[2]]
dtrain <- xgb.DMatrix(X_train, label=target, missing = NA)
dtest <- xgb.DMatrix(X_test, missing = NA)
par <- list(booster = "gbtree", objective = "reg:linear", eta = 0.2,
min_child_weight = 50, gamma = .7, subsample = 0.6, colsample_bytree = .6,
max_depth = 12, verbose = 1, scale_pos_weight = 1, lambda = 50, alpha=.1,
eval_metric = eval_metric)
par <- list(booster = "gbtree", objective = "reg:linear", eta = 0.2,
min_child_weight = 50, gamma = .7, subsample = 0.6, colsample_bytree = .6,
max_depth = 12, verbose = 1, scale_pos_weight = 1, lambda = 50, alpha=.1,
eval_metric = 'auc')
bst  <- xgb.cv(params = par, data = dtrain , nrounds = 300,
nfold = 5, verbose=TRUE)
